package handlers;


import queries.*;

import java.io.Console;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.sql.*;

/**
 * The Main handler for the App
 */
public class QueryHandler {

    private Scanner inp;
    private Connection con;
    private Map<Integer, Command> commands;


    public QueryHandler(){
        this.inp = new Scanner(System.in);
        InitializeCommands();
        //        createConnection();
    }

    /**
     * Ask the user for the next command
     * @return whether or not the user wants to exit
     */
    public boolean nextCommand(){
        for(Integer i : commands.keySet()){
            System.out.println(i + ". " + commands.get(i));
        }
        System.out.print("Input a number corresponding to the above commands (or exit): ");
        String input = inp.nextLine();
        int chosen;
        try {
            chosen = Integer.parseInt(input);
            System.out.println();
        } catch (Exception e){
            if (!input.toLowerCase().equals("exit")) {
                System.out.println("Sorry I didnt recognize that command");
                return false;
            }
            return true;
        }

        commands.get(chosen).runQuery();

        return false;
    }


    /**
     * Initializes the list of commands. This is where to add new commands
     */
    private void InitializeCommands(){
        this.commands = new HashMap<>();
//        this.commandDesc = new HashMap<>();

        int commandNum = 1;

        commands.put(commandNum, new Command("Register",
                "Register a new user in the database",
                new RegisterUser()));
        commandNum++;
        commands.put(commandNum, new Command("Subscribe",
                "Subscribe a user to an app",
                new SubscribeUser()));
//        commandNum++;
//        commands.put(commandNum, new Command("Add To List",
//                "Add a show to a user's \"My List\"",
//                n));
        commandNum++;
        commands.put(commandNum, new Command("Update Version",
                "Update an app's version on a specific platform",
                new UpdateAppVersion()));
        commandNum++;
        commands.put(commandNum, new Command("Add Episode",
                "Add a new episode (with all associated meta data), which is the latest in a show’s current season",
                new AddEpisode()));
        commandNum++;
        commands.put(commandNum, new Command("Top 10",
                "Produce a ranked list of the top-10 most watched shows, each with the corresponding app",
                new Top10Shows()));
        commandNum++;
        commands.put(commandNum, new Command("Free shows",
                "Find all free videos on a particular platform",
                new FindFree()));
        commandNum++;
        commands.put(commandNum, new Command("Find Movies",
                "Find all long videos that were released this year and aren’t part of any show",
                new FindMovies()));
        commandNum++;
        commands.put(commandNum, new Command("Ranked by Country",
                "Produce a ranked list of revenue generated by apps in a country",
                new GetRankedRevenue()));
        commandNum++;
        commands.put(commandNum, new Command("Top Video Tags",
                "Produce a ranked list of watch counts from the top-3 video tags",
                new GetTop3Tag()));

        commandNum++;
        commands.put(commandNum, new Command("Most Anticipated Shows",
                "Get a list of all of the shows that users are most looking forward to seeing",
                new MostAnticipatedShows()));

        commandNum++;
        commands.put(commandNum, new Command("Recommended by Tag",
                "Get the most liked shows and movies from a specific tag",
                new RecommendedByTag()));

        commandNum++;
        commands.put(commandNum, new Command("Tag Revenue Breakdown",
                "Get a breakdown of how much money each app is making from each tag",
                new MoneyMakingTags()));

        commandNum++;
        commands.put(commandNum, new Command("Recommended Videos",
                "Get the top videos that are available under a user's subscriptions",
                new RecommendedVideos()));

        commandNum++;
        commands.put(commandNum, new Command("Similar Users",
                "Get users that have similar tastes to another specified user",
                new SimilarUsers()));

        commandNum++;
        commands.put(commandNum, new Command("Add Show to List",
                "Add a show to a user's list",
                new AddShowToList()));

    }



}
